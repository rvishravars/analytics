import os
import pandas as pd
from datetime import datetime, timezone, timedelta
import matplotlib.pyplot as plt
import argparse
import importlib

from bug_issue_utils import get_bug_issues

OUTPUT_DIR = "data"

def main():
    parser = argparse.ArgumentParser(description="Count bug-like issues before and after CI adoption.")
    parser.add_argument(
        "--projects-file",
        required=True,
        help="The Python module name (without .py) containing the 'projects' list of repo slugs.",
    )
    parser.add_argument(
        "--output-file",
        required=True,
        help="Path to the output CSV file.",
    )
    parser.add_argument(
        "--stats-file",
        required=True,
        help="Path to the stats CSV file from 23_collect_github_stats.py for the cohort.",
    )
    args = parser.parse_args()

    try:
        projects_module = importlib.import_module(args.projects_file)
        target_projects = set(projects_module.projects)
    except (ImportError, AttributeError):
        error_msg = (
            f"Could not import 'projects' list from '{args.projects_file}.py'.\n"
            f"Please ensure the file '{args.projects_file}.py' exists in the current directory.\n"
            "This file is generated by 'helper_create_cohorts.py'. You may need to run the prerequisite scripts."
        )
        raise RuntimeError(error_msg)

    try:
        stats_df = pd.read_csv(args.stats_file)
    except FileNotFoundError:
        raise RuntimeError(f"Stats file not found: {args.stats_file}. Please run '23_collect_github_stats.py' first.")

    # Filter the main stats dataframe to only include our target projects
    df = stats_df[stats_df['Project'].isin(target_projects)].copy()
    print(f"Found {len(df)} of {len(target_projects)} target projects in {args.stats_file}.")

    results = []
    for _, row in df.iterrows():
        project = row["Project"]
        ci_str = row["First CI Run Date"]
        if pd.isna(ci_str) or not ci_str:
            continue
        try:
            ci_date = datetime.strptime(ci_str, "%Y-%m-%d").replace(tzinfo=timezone.utc)

            if "/" not in project:
                print(f"⚠️ Skipping invalid project slug: '{project}'")
                continue
            owner, repo = project.split("/", 1)
            print(f"Processing {owner}/{repo}...")

            stats = get_bug_issues(owner, repo, ci_date)
            results.append({
                "Project": project,
                "Bug Issues Before CI": stats["before"],
                "Bug Issues After CI": stats["after"]
            })

        except Exception as e:
            print(f"❌ Error processing {project}: {e}")

    # Convert to DataFrame and save
    if results:
        bug_df = pd.DataFrame(results)
        # Save to CSV for other analyses
        out_csv_path = args.output_file
        os.makedirs(os.path.dirname(out_csv_path) or ".", exist_ok=True)
        bug_df.to_csv(out_csv_path, index=False)
        print(f"✅ Bug data saved to {out_csv_path}")

if __name__ == "__main__":
    main()
